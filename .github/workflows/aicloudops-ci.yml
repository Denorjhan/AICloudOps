name: AICloudOps - CI

on:
  push:
    branches:
    - main
    # paths:
    # - 'aicloudops/chatbot/**'
    # - 'aicloudops/logger/*'
  pull_request:
    branches:
    - main
    paths:
    - 'aicloudops/chatbot/**'
    - 'aicloudops/logger/*'
  workflow_dispatch:

# permissions:
#   contents: write
#   checks: write
#   pull-requests: write

jobs:
  #   detect-changes:
  #     name: Detect Changes
  #     runs-on: ubuntu-latest
  #     outputs:
  #       microservices: ${{ steps.filter.outputs.changes }}

  #     steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Detect Changes
  #       uses: dorny/paths-filter@v3
  #       id: filter
  #       with:
  #         base: ${{ github.ref }}
  #         filters: |
  #           chatbot: aicloudops/chatbot/**
  #           logger: aicloudops/logger/**

  #     # upload artifact to be used by the CD workflow
  #     - name: Output Changes to JSON File
  #       run: |
  #         echo "${{ steps.filter.outputs.changes }}" > changes.json

  #     - name: Upload Changed Microservices List
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: aicloudops-detected-changes-${{ github.sha }}
  #         path: changes.json

  #   lint-format-check:
  #     name: Lint and Format
  #     runs-on: ubuntu-latest
  #     needs: [detect-changes]
  #     strategy:
  #       matrix:
  #         microservice: ${{ fromJSON(needs.detect-changes.outputs.microservices) }}
  #         python-version: ['3.10']
  #     defaults:
  #       run:
  #         working-directory: aicloudops/${{ matrix.microservice }}

  #     steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #       # cache: 'pip'

  #   - name: Cache Python Packages
  #     uses: actions/cache@v4
  #     with:
  #       path: ${{ env.pythonLocation }} # cache the python location instead of just the .whl files for even faster installs
  #       key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt


  #   # format check w/ ruff but dont make the changes
  #   - name: Format with Ruff
  #     uses: chartboost/ruff-action@v1
  #     with:
  #       src: 'aicloudops/${{ matrix.microservice }}/src'
  #       args: 'format --diff'
  #       # continue-on-error: true

  #   # lint check w/ ruff but dont make the changes
  #   - name: Lint with Ruff
  #     uses: chartboost/ruff-action@v1
  #     with:
  #       src: 'aicloudops/${{ matrix.microservice }}/src'
  #       args: '--output-format github'
  #       # continue-on-error: true


  # # unit-tests:
  #   name: PyTest
  #   runs-on: ubuntu-latest
  #   needs: detect-changes
  #   strategy:
  #     matrix:
  #       microservice: ${{ fromJSON(needs.detect-changes.outputs.microservices) }}
  #       python-version: ['3.10']
  #   defaults:
  #     run:
  #       working-directory: aicloudops/${{ matrix.microservice }}

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Cache Python Packages
  #     uses: actions/cache@v4
  #     with:
  #       # cache the python location instead of just the .whl files for even faster installs
  #       path: ${{ env.pythonLocation }}
  #       key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       pip install pytest-github-report
  #       pip install pytest-cov

  #   - name: Test with pytest
  #     env:
  #       OPENAI_API_KEY: fake_openai_api_key
  #       OPENAI_MODEL: fake_model_name
  #     run: pytest --junitxml=test-results-${{ matrix.python-version }}.xml --cov=src/ --cov-report=xml tests/

  #   - name: Upload pytest test results
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: pytest-results-${{ matrix.microservice }}
  #       path: aicloudops/${{ matrix.microservice }}/test-results-${{ matrix.python-version }}.xml
  #     # Use always() to always run this step to publish test results when there are test failures
  #     if: ${{ always() }}

  build:
    name: Build and Push Docker Containers to ECR Public
    runs-on: ubuntu-latest
    # needs: [lint-format-check, unit-tests]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # ECR is a global service so set the region to us-east-1
        # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        # role-session-name: GitHubActionsECR

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build and Push ECR Public
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        ECR_REGISTRY_ALIAS: c6w3t1p6
        ECR_REPOSITORY: aicloudops-chatbot #! remove hard coded value
        IMAGE_TAG: ${{ github.sha }}
      run: | #echoing cmds to debug variables
        docker build -t $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG aicloudops/chatbot
        docker push $ECR_REGISTRY/$ECR_REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG

