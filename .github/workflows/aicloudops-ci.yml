name: AICloudOps - CI

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - aicloudops/chatbot/**
    - aicloudops/logger/**
  pull_request:
    branches:
    - main
    paths:
    - aicloudops/chatbot/**
    - aicloudops/logger/**

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      microservices: ${{ steps.filter.outputs.changes }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Detect Changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          chatbot: aicloudops/chatbot/**
          logger: aicloudops/logger/**

    # upload artifact to be used by the CD workflow
    - name: Output Changes to JSON File
      run: |
        echo "${{ steps.filter.outputs.changes }}" > changes.json

    - name: Upload Changed Microservices List
      uses: actions/upload-artifact@v4
      with:
        name: aicloudops-detected-changes-${{ github.sha }}
        path: changes.json

  lint-format-check:
    name: Lint And Format Check
    runs-on: ubuntu-latest
    needs: [detect-changes]
    strategy:
      matrix:
        microservice: ${{ fromJSON(needs.detect-changes.outputs.microservices) }}
        python-version: ['3.10']
    defaults:
      run:
        working-directory: aicloudops/${{ matrix.microservice }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        # cache: 'pip'

    - name: Cache Python Packages
      uses: actions/cache@v4
      with:
        path: ${{ env.pythonLocation }} # cache the python location instead of just the .whl files for even faster installs
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}


    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt


    # format check w/ ruff but dont make the changes
    - name: Format with Ruff
      uses: chartboost/ruff-action@v1
      with:
        src: 'aicloudops/${{ matrix.microservice }}/src'
        args: 'format --diff'
        # continue-on-error: true

    # lint check w/ ruff but dont make the changes
    - name: Lint with Ruff
      uses: chartboost/ruff-action@v1
      with:
        src: 'aicloudops/${{ matrix.microservice }}/src'
        args: '--output-format github'
        # continue-on-error: true


  unit-tests:
    name: PyTest
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        microservice: ${{ fromJSON(needs.detect-changes.outputs.microservices) }}
        python-version: ['3.10']
    defaults:
      run:
        working-directory: aicloudops/${{ matrix.microservice }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python Packages
      uses: actions/cache@v4
      with:
        # cache the python location instead of just the .whl files for even faster installs
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test with pytest
      env:
        OPENAI_API_KEY: fake_openai_api_key
        OPENAI_MODEL: fake_model_name
      run: pytest --junitxml=test-results-${{ matrix.python-version }}.xml --cov=src/ --cov-report=xml tests/
      continue-on-error: true

    # - name: Upload pytest test results
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: pytest-results-${{ matrix.python-version }}
    #     path: junit/test-results-${{ matrix.python-version }}.xml
    #   # Use always() to always run this step to publish test results when there are test failures
    #   if: ${{ always() }}

    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        junitxml-path: aicloudops/${{ matrix.microservice }}/test-results-${{ matrix.python-version }}.xml
        pytest-xml-coverage-path: aicloudops/${{ matrix.microservice }}/coverage.xml

    - name: Check the output coverage
      run: |
        echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
        echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
        echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"
        echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"
        echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
        echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
        echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
        echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
        echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
        echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"


