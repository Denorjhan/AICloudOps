#! start with "docker compose up -d && docker attach chatbot"

version: "3.8"

services:
  docker-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mount as read-only for security
    ports:
      - "2375:2375"
    environment:
      BUILD: 1
      IMAGES: 1
      CONTAINERS: 1
      VOLUMES: 1
      NETWORKS: 1
      POST: 1
      EXEC: 1
    networks:
      - aicloudops

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ service port
      - "15672:15672" # Management console port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aicloudops

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: ${DB_PORT}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always
    networks:
      - aicloudops

  logger:
    build:
      context: aicloudops/logger
      dockerfile: Dockerfile
    container_name: logger
    volumes:
      - ai_code:/tmp:nocopy
    tty: true
    environment:
      DB_HOST: postgres # postgres service name
      DB_PORT: ${DB_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - aicloudops

  chatbot:
    build:
      context: aicloudops/chatbot
      dockerfile: Dockerfile
    container_name: chatbot
    volumes:
      - ai_code:/tmp:nocopy
    tty: true
    stdin_open: true
    environment:
      DOCKER_HOST: tcp://docker-proxy:2375
      VOLUME_NAME: ai_code
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    depends_on:
      - docker-proxy
      - rabbitmq
      - logger
    networks:
      - aicloudops

volumes:
  ai_code:
  rabbitmq_data:
  pg_data:

networks:
  aicloudops:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: app_br
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/28
